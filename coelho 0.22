-- Carrega a WindUI
local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()

-- Configura√ß√£o do Key System (Platoboost)
local service = "SEU USUARIO"
local secret = "CHAVE SECRETA DO PLATOBOOST"
local useNonce = true

-- Vari√°veis globais
local requestSending = false
local cachedLink, cachedTime = "", 0
local HttpService = game:GetService("HttpService")
local keyVerified = false

-- Fun√ß√µes auxiliares
local fSetClipboard = setclipboard or toclipboard
local fRequest = request or http_request
local fStringChar = string.char
local fToString = tostring
local fStringSub = string.sub
local fOsTime = os.time
local fMathRandom = math.random
local fMathFloor = math.floor
local fGetHwid = gethwid or function() 
    return game:GetService("Players").LocalPlayer.UserId 
end

-- Fun√ß√£o de notifica√ß√£o
local function onMessage(message)
    pcall(function()
        game:GetService("StarterGui"):SetCore("ChatMakeSystemMessage", { 
            Text = message 
        })
    end)
    
    pcall(function()
        WindUI:Notify({
            Title = "Sistema de Chaves",
            Content = message,
            Duration = 5,
            Icon = message:find("v√°lida") and "check" or "alert-triangle"
        })
    end)
end

-- Aguarda o jogo carregar
repeat task.wait(1) until game:IsLoaded() and game.Players.LocalPlayer

-- Fun√ß√µes de encoding/decoding
function lEncode(data)
    local success, result = pcall(HttpService.JSONEncode, HttpService, data)
    if success then
        return result
    else
        onMessage("Erro ao codificar JSON: " .. tostring(result))
        return nil
    end
end

function lDecode(data)
    local success, result = pcall(HttpService.JSONDecode, HttpService, data)
    if success then
        return result
    else
        onMessage("Erro ao decodificar JSON: " .. tostring(result))
        return nil
    end
end

-- Fun√ß√£o de digest simples
local function lDigest(input)
    local inputStr = tostring(input)
    local hash = {}
    for i = 1, #inputStr do
        table.insert(hash, string.byte(inputStr, i))
    end
    local hashHex = ""
    for _, byte in ipairs(hash) do
        hashHex = hashHex .. string.format("%02x", byte)
    end
    return hashHex
end

-- Detecta o host dispon√≠vel
local host = "https://api.platoboost.com"
local success, hostResponse = pcall(fRequest, {
    Url = host .. "/public/connectivity",
    Method = "GET"
})

if not success or not hostResponse or (hostResponse.StatusCode ~= 200 and hostResponse.StatusCode ~= 429) then
    host = "https://api.platoboost.net"
end

-- Fun√ß√£o para cachear o link
function cacheLink()
    if cachedTime + (10 * 60) < fOsTime() then
        local success, response = pcall(fRequest, {
            Url = host .. "/public/start",
            Method = "POST",
            Body = lEncode({
                service = service,
                identifier = lDigest(fGetHwid())
            }),
            Headers = {
                ["Content-Type"] = "application/json"
            }
        })
        
        if not success then
            onMessage("Erro na requisi√ß√£o: " .. tostring(response))
            return false, "Erro na requisi√ß√£o"
        end
        
        if not response then
            onMessage("Nenhuma resposta do servidor")
            return false, "Sem resposta"
        end
        
        if response.StatusCode == 200 then
            local decoded = lDecode(response.Body)
            if not decoded then
                return false, "Erro ao decodificar resposta"
            end
            
            if decoded.success == true then
                cachedLink = decoded.data.url
                cachedTime = fOsTime()
                onMessage("Link obtido com sucesso!")
                return true, cachedLink
            else
                onMessage("Erro: " .. tostring(decoded.message))
                return false, decoded.message
            end
        elseif response.StatusCode == 429 then
            onMessage("Aguarde 20 segundos antes de tentar novamente")
            return false, "Rate limit"
        else
            onMessage("Status inv√°lido: " .. tostring(response.StatusCode))
            return false, "Status inv√°lido"
        end
    else
        return true, cachedLink
    end
end

-- Gera nonce aleat√≥rio
local function generateNonce()
    local str = ""
    for _ = 1, 16 do
        str = str .. fStringChar(fMathFloor(fMathRandom() * (122 - 97 + 1)) + 97)
    end
    return str
end

-- Testa gera√ß√£o de nonce
for _ = 1, 5 do
    local oNonce = generateNonce()
    task.wait(0.2)
    if generateNonce() == oNonce then
        error("Erro no nonce do Platoboost")
    end
end

-- Copia link para √°rea de transfer√™ncia
local function copyLink()
    local success, link = cacheLink()
    if success then
        local clipSuccess, clipError = pcall(fSetClipboard, link)
        if clipSuccess then
            onMessage("Link copiado para a √°rea de transfer√™ncia!")
        else
            onMessage("Erro ao copiar: " .. tostring(clipError))
        end
    end
end

-- Resgata uma nova chave
local function redeemKey(key)
    local nonce = generateNonce()
    local endpoint = host .. "/public/redeem/" .. fToString(service)
    local body = {
        identifier = lDigest(fGetHwid()),
        key = key
    }
    
    if useNonce then
        body.nonce = nonce
    end
    
    local success, response = pcall(fRequest, {
        Url = endpoint,
        Method = "POST",
        Body = lEncode(body),
        Headers = {
            ["Content-Type"] = "application/json"
        }
    })
    
    if not success or not response then
        onMessage("Erro na requisi√ß√£o de resgate")
        return false
    end
    
    if response.StatusCode == 200 then
        local decoded = lDecode(response.Body)
        if not decoded then return false end
        
        if decoded.success == true and decoded.data.valid == true then
            if useNonce then
                if decoded.data.hash == lDigest("true" .. "-" .. nonce .. "-" .. secret) then
                    onMessage("Chave resgatada com sucesso!")
                    return true
                else
                    onMessage("Falha na verifica√ß√£o de integridade")
                    return false
                end
            else
                onMessage("Chave resgatada com sucesso!")
                return true
            end
        else
            onMessage("Chave inv√°lida")
            return false
        end
    elseif response.StatusCode == 429 then
        onMessage("Aguarde 20 segundos antes de tentar novamente")
        return false
    else
        onMessage("Status inv√°lido: " .. tostring(response.StatusCode))
        return false
    end
end

-- Verifica se a chave √© v√°lida
local function verifyKey(key)
    if not key or key == "" then
        onMessage("Por favor, insira uma chave v√°lida")
        return false
    end
    
    if requestSending == true then
        onMessage("Aguarde a requisi√ß√£o anterior")
        return false
    end
    
    requestSending = true
    local nonce = generateNonce()
    local endpoint = host .. "/public/whitelist/" .. fToString(service) .. 
                     "?identifier=" .. lDigest(fGetHwid()) .. "&key=" .. key
    
    if useNonce then
        endpoint = endpoint .. "&nonce=" .. nonce
    end
    
    local success, response = pcall(fRequest, {
        Url = endpoint,
        Method = "GET"
    })
    
    requestSending = false
    
    if not success or not response then
        onMessage("Erro na verifica√ß√£o")
        return false
    end
    
    if response.StatusCode == 200 then
        local decoded = lDecode(response.Body)
        if not decoded then return false end
        
        if decoded.success == true then
            if decoded.data.valid == true then
                onMessage("Chave v√°lida!")
                return true
            else
                if fStringSub(key, 1, 5) == "FREE_" then
                    return redeemKey(key)
                else
                    onMessage("Chave inv√°lida")
                    return false
                end
            end
        else
            onMessage("Erro: " .. tostring(decoded.message))
            return false
        end
    elseif response.StatusCode == 429 then
        onMessage("Aguarde 20 segundos antes de tentar novamente")
        return false
    else
        onMessage("Status inv√°lido: " .. tostring(response.StatusCode))
        return false
    end
end

local function loadMainScript()
    local loadSuccess, loadError = pcall(function()
        print("funciono kk") -- loadstring(game:HttpGet("https://raw.githubusercontent.com/paoplays958-coder/coelho-0.22/refs/heads/main/coelho%200.22"))()
    end)
    
    if loadSuccess then
        onMessage("Script carregado com sucesso!")
        return true
    else
        onMessage("Erro ao carregar script: " .. tostring(loadError))
        return false
    end
end

-- Obt√©m o link inicial
cacheLink()

-- Configura√ß√£o da Janela com WindUI (SEM KeySystem integrado)
local Window = WindUI:CreateWindow({
    Title = "XXMZ Hub",
    Icon = "shield",
    Author = "By Uma_pessoa29",
    Folder = "XXMZHub",
    Size = UDim2.fromOffset(580, 460),
    MinSize = Vector2.new(560, 350),
    MaxSize = Vector2.new(850, 560),
    Transparent = true,
    Theme = "Dark",
    Resizable = true,
    SideBarWidth = 200,
    BackgroundImageTransparency = 0.42,
    HideSearchBar = true,
    ScrollBarEnabled = false,
    Background = "rbxassetid://106924593304955"
})

-- Cria a aba Key System
local KeyTab = Window:Tab({
    Title = "Key System",
    Icon = "key"
})

-- T√≠tulo e descri√ß√£o
local Paragraph = KeyTab:Paragraph({
    Title = "üîê Sistema de Verifica√ß√£o",
    Desc = "Para acessar o hub, voc√™ precisa verificar uma chave. Clique em 'Pegar Chave' para obter uma chave gratuita, depois insira-a no campo abaixo e clique em 'Verificar'."
})

-- Bot√£o para pegar chave
local GetKeyButton = KeyTab:Button({
    Title = "Pegar Chave",
    Desc = "Copia o link para obter uma chave gratuita",
    Icon = "link",
    Callback = function()
        copyLink()
    end
})

-- Campo de texto para chave
local KeyInput = KeyTab:Input({
    Title = "Sua Chave",
    Desc = "Cole a chave obtida no site",
    Value = "",
    InputIcon = "key",
    Type = "Input",
    Placeholder = "Cole sua chave aqui...",
    Callback = function(input)
        -- Input armazenado automaticamente
    end
})

-- Bot√£o para verificar chave
local VerifyButton = KeyTab:Button({
    Title = "Verificar Chave",
    Desc = "Valida sua chave e carrega o hub",
    Icon = "check-circle",
    Callback = function()
        local key = KeyInput.Value
        if key == "" or key == nil then
            onMessage("Por favor, insira uma chave no campo acima")
            return
        end
        
        onMessage("Verificando chave...")
        local success = verifyKey(key)
        
        if success then
            keyVerified = true
            onMessage("‚úÖ Chave v√°lida! Carregando hub...")
            task.wait(1)
            
            local scriptLoaded = loadMainScript()
            if scriptLoaded then
                onMessage("Hub carregado! Fechando menu...")
                task.wait(1)
                pcall(function()
                    Window:Destroy()
                end)
            else
                onMessage("Erro ao carregar o hub. Tente novamente.")
            end
        else
            onMessage("‚ùå Chave inv√°lida. Obtenha uma nova chave e tente novamente")
        end
    end
})

-- Bot√£o de ajuda
local HelpButton = KeyTab:Button({
    Title = "Ajuda",
    Desc = "Instru√ß√µes detalhadas",
    Icon = "help-circle",
    Callback = function()
        WindUI:Notify({
            Title = "Como usar",
            Content = "1. Clique em 'Pegar Chave'\n2. Complete os passos no site\n3. Cole a chave no campo\n4. Clique em 'Verificar Chave'",
            Duration = 10,
            Icon = "info"
        })
    end
})
